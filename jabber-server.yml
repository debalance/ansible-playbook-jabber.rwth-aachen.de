# Links
# http://docs.ansible.com/ansible/
# https://serversforhackers.com/an-ansible-tutorial

# yamllint disable rule:line-length rule:truthy rule:commas

# TODO: use ansible-vault for passwords
---
- hosts: jabber
  vars:
   - ejabberd_admin_password: PutYourPasswordHere
   - ejabberd_mysql_db: ejabberd
   - ejabberd_mysql_user: ejabberd
   - ejabberd_mysql_password: PutYourPasswordHere
   - homepage_mysql_db: homepage
   - homepage_mysql_user: django
   - homepage_mysql_password: PutYourPasswordHere
   - root_mysql_password: PutYourPasswordHere
  handlers:
   - name: apt-get update
     apt: update_cache=yes cache_valid_time=0
   - name: Enable celery
     command: /bin/systemctl enable celery.service
   - name: Reload systemd
     command: /bin/systemctl daemon-reload
   - name: Restart apache2
     service: name=apache2 state=restarted
   - name: Restart celery
     service: name=celery state=restarted
   - name: Restart cron
     service: name=cron state=restarted
   - name: Restart ejabberd
     service: name={{ item.service }} state={{ item.state }}
     with_items:
      - {service: ejabberd, state: stopped}
      - {service: epmd,     state: stopped}
      - {service: ejabberd, state: started}
      - {service: epmd,     state: started}
   - name: Restart munin-node
     service: name=munin-node state=restarted
   - name: Restart postfix
     service: name=postfix state=restarted
   - name: Restart ssh
     service: name=ssh state=restarted
   - name: Restart uwsgi
     service: name=uwsgi state=restarted
   - name: Initialize mysql database for ejabberd
     mysql_db: name={{ ejabberd_mysql_db }} state=import target=/usr/share/ejabberd/mysql.sql
               login_user=ejabberd login_password={{ ejabberd_mysql_password }}
  tasks:
   #
   # Preparations:
   #
   - name: Copy /etc/apt/sources.list
     copy: src=files/apt/sources.list dest=/etc/apt/sources.list owner=root group=root mode=0644
     notify: apt-get update
   - name: Enable Backports
     apt_repository: repo='deb http://ftp.halifax.rwth-aachen.de/debian jessie-backports main' state=present filename=jessie-backports
     notify: apt-get update
   - name: Run notified handlers right now
     meta: flush_handlers
   - name: Update apt cache
     apt: update_cache=yes cache_valid_time=3600
   - name: Install useful/needed tools
     apt: name={{ item }} state=latest
     with_items:
      - cron
      - debconf
      - debconf-utils
      - etckeeper
      - git
      - haveged
      - htop
      - logrotate
      - mc
      - molly-guard
      - netcat-openbsd
      - ncdu
      - rsync
      - screen
      - tree
      - unattended-upgrades
      - unp
      - vim
      - yamllint
   - name: Uninstall some unnecessary packages
     apt: name={{ item }} state=absent purge=yes
     with_items:
      - nfs-common
      - rpcbind
   - name: Enable unattended-upgrades
     copy: src=files/{{ item }} dest=/etc/{{ item }} owner=root group=root mode=0644
     with_items:
      - apt/apt.conf.d/20auto-upgrades
      - apt/apt.conf.d/50unattended-upgrades
   - name: Disallow SSH password authentication
     lineinfile: dest=/etc/ssh/sshd_config regexp='PasswordAuthentication' line='PasswordAuthentication no' state=present
     notify: Restart ssh
   - name: Disallow SSH root access
     lineinfile: dest=/etc/ssh/sshd_config regexp='PermitRootLogin' line='PermitRootLogin no' state=present
     notify: Restart ssh
   - name: Copy /etc/gai.conf to prefer IPv4 until IPv6 becomes available
     copy: src=files/gai.conf dest=/etc/gai.conf owner=root group=root mode=0644
   #
   # Set up postfix
   #
   - name: Install postfix
     apt: name=postfix state=latest
   - name: Purge exim4
     apt: name={{ item }} state=absent purge=yes
     with_items:
      - exim4
      - exim4-base
      - exim4-config
      - exim4-daemon-light
   - name: Configure postfix
     lineinfile: dest=/etc/postfix/main.cf regexp={{ item.regexp }} line={{ item.line }} state=present
     with_items:
      - {regexp: '^mydestination', line: 'mydestination = localhost'}
      - {regexp: '^relayhost',     line: 'relayhost = smarthost.rwth-aachen.de'}
     notify: Restart postfix
   #
   # Set up MySQL:
   #
   - name: Set MySQL root password before installing
     debconf: name=mysql-server question=mysql-server/root_password value={{root_mysql_password | quote}} vtype=password
     changed_when: False
   - name: Confirm MySQL root password before installing
     debconf: name=mysql-server question=mysql-server/root_password_again value={{root_mysql_password | quote}} vtype=password
     changed_when: False
   - name: Install DBMS
     apt: name={{ item }} state=latest default_release=jessie-backports
     with_items:
      - mysql-server
      - mysql-client
   - name: Install python-mysqldb (needed for Ansible's mysql_* modules)
     apt: name=python-mysqldb state=latest
   - name: Copy ejabberd's mysql.sql to host
     copy: src=files/ejabberd/mysql.sql dest=/usr/share/ejabberd/mysql.sql owner=root group=root mode=0644
   - name: Remove the MySQL test database
     mysql_db: db=test state=absent
               login_user=root login_password={{ root_mysql_password }}
   - name: Create mysql database for ejabberd
     mysql_db: name={{ ejabberd_mysql_db }} state=present
               login_user=root login_password={{ root_mysql_password }}
   - name: Create mysql database for homepage
     mysql_db: name={{ homepage_mysql_db }} state=present
               login_user=root login_password={{ root_mysql_password }}
   - name: Create mysql test database for homepage
     mysql_db: name=test_{{ homepage_mysql_db }} state=present
               login_user=root login_password={{ root_mysql_password }}
     notify: Initialize mysql database for ejabberd
   - name: Delete anonymous MySQL server user for localhost
     mysql_user: user="" state=absent
                 login_user=root login_password={{ root_mysql_password }}
   - name: Create mysql user for ejabberd
     mysql_user: name={{ ejabberd_mysql_user }} password={{ ejabberd_mysql_password }} priv={{ ejabberd_mysql_db }}.*:ALL
                 login_user=root login_password={{ root_mysql_password }}
   - name: Create mysql user for homepage
     mysql_user: name={{ homepage_mysql_user }} password={{ homepage_mysql_password }} priv={{ homepage_mysql_db }}.*:ALL
                 append_privs=True login_user=root login_password={{ root_mysql_password }}
   - name: Give privileges to mysql homepage user for test database
     mysql_user: name={{ homepage_mysql_user }} append_privs=True priv=test_{{ homepage_mysql_db }}.*:ALL
                 login_user=root login_password={{ root_mysql_password }}
   #
   # Set up the XMPP server:
   #
   - name: Install Erlang
     apt: name={{ item }} state=latest default_release=jessie
     with_items:
      - erlang-base
      - erlang-edoc
      - erlang-odbc
   - name: Configure ejabberdctl
     copy: src=files/ejabberd/default.ejabberd dest=/etc/default/ejabberd owner=root group=root mode=0644
   - name: Install ejabberd
     apt: name={{ item }} state=latest default_release=jessie-backports
     with_items:
      - ejabberd
      - ejabberd-mod-s2s-log
      - erlang-p1-mysql
      - imagemagick
      - yamllint
   - name: Copy ejabberd.pem
     copy: src=files/ejabberd/ejabberd.pem dest=/etc/ejabberd/ejabberd.pem owner=ejabberd group=ejabberd mode=0440
     notify: Restart ejabberd
   - name: Copy dhparams.pem
     copy: src=files/ejabberd/dhparams.pem dest=/etc/ejabberd/dhparams.pem owner=ejabberd group=ejabberd mode=0440
     notify: Restart ejabberd
   - name: Copy ejabberd.yml
     copy: src=files/ejabberd/ejabberd.yml dest=/etc/ejabberd/ejabberd.yml owner=ejabberd group=ejabberd mode=0440
     notify: Restart ejabberd
   - name: Enable ejabberd module s2s_log
     command: creates=/etc/ejabberd/modules.d/mod_s2s_log.yml
              cp /usr/share/doc/ejabberd-mod-s2s-log/conf/mod_s2s_log.yml /etc/ejabberd/modules.d/
     notify: Restart ejabberd
   - name: Run notified handlers right now
     meta: flush_handlers
   - name: Make sure ejabberd is running
     service: name=ejabberd state=started
   - name: Configure ejabberd user "admin@jabber.rwth-aachen.de"
     ejabberd_user: username=admin host=jabber.rwth-aachen.de state=present password={{ ejabberd_admin_password }}
   - name: Copy cron jobs
     copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root mode=0755
     with_items:
      - {src: files/cron/ejabberd_old_messages,    dest: /etc/cron.daily/ejabberd_old_messages}
      - {src: files/cron/ejabberd_unused_accounts, dest: /etc/cron.daily/ejabberd_unused_accounts}
      - {src: files/cron/ejabberd_unused_rooms,    dest: /etc/cron.daily/ejabberd_unused_rooms}
      - {src: files/cron/mysql_backup,             dest: /etc/cron.daily/mysql_backup}
     notify: Restart cron
   - name: Create /var/log/ejabberd/archive
     file: path=/var/log/ejabberd/archive state=directory owner=root group=adm mode=0750
   - name: Copy logrotate config for ejabberd
     copy: src=files/logrotate/ejabberd dest=/etc/logrotate.d/ejabberd owner=root group=root mode=0644
   #
   # Set up the website:
   #
   - name: Install Webserver
     apt: name={{ item }} state=latest
     with_items:
      - apache2
      - build-essential
      - ca-certificates
      - gettext
      - libapache2-mod-macro
      - libapache2-mod-proxy-uwsgi
      - libgpgme11-dev
      - libmysqlclient-dev
      - python3-dev
      - python3-setuptools
      - python3-virtualenv
      - redis-server
      - uwsgi
      - uwsgi-plugin-python3
      - virtualenv
   - name: Create system group "django"
     group: state=present system=yes name=django
   - name: Create system user "django"
     user: state=present system=yes name=django group=django createhome=yes home=/var/lib/django shell=/bin/bash
   - name: Create /srv/www/jabber.rwth-aachen.de
     file: path=/srv/www/jabber.rwth-aachen.de state=directory group=django owner=django mode=0755
   - name: Create /srv/www/upload.jabber.rwth-aachen.de
     file: path=/srv/www/upload.jabber.rwth-aachen.de state=directory group=django owner=django mode=0755
   - name: Create /srv/django
     file: path=/srv/django state=directory group=django owner=django mode=0755
   - name: Install homepage into /srv/django
     become: yes
     become_user: django
     git: repo=https://github.com/debalance/hp.git dest=/srv/django update=yes force=yes version=rwth+srg
     notify:
      - Restart uwsgi
      - Restart celery
   - name: Install favicon.ico
     copy: src=files/apache2/favicon.ico dest=/srv/www/jabber.rwth-aachen.de/favicon.ico
   - name: Copy sudoers file for django
     copy: src=files/django/sudoers dest=/etc/sudoers.d/django owner=root group=root mode=0440
   - name: Copy localsettings.py
     copy: src=files/django/localsettings.py dest=/srv/django/hp/hp/localsettings.py owner=root group=root mode=0644
     notify:
      - Restart uwsgi
      - Restart celery
   - name: Set up python virtualenv
     become: yes
     become_user: django
     pip: virtualenv=/srv/django virtualenv_python=python3 name={{ item}} state=latest
     with_items:
      - pip
      - setuptools
      - ipython
   - name: Populate python virtualenv
     become: yes
     become_user: django
     pip: virtualenv=/srv/django virtualenv_python=python3 requirements=/srv/django/requirements.txt state=present
     notify:
      - Restart uwsgi
      - Restart celery
   - name: Add mysqlclient to python virtualenv
     become: yes
     become_user: django
     pip: virtualenv=/srv/django virtualenv_python=python3 name=mysqlclient state=present
   - name: Copy modified homepage files (should be commited in git)
     become: yes
     become_user: django
     copy: src=files/django/{{ item.src }} dest=/srv/django/hp/{{ item.dest }}
     with_items:
      - {src: sidebar.html,       dest: core/templates/core/include/sidebar.html}
      - {src: core-django.po,     dest: core/locale/de/LC_MESSAGES/django.po}
      - {src: blogpost_list.html, dest: blog/templates/blog/blogpost_list.html}
      - {src: user_register.html, dest: account/templates/account/user_register.html}
      - {src: account-django.po,  dest: account/locale/de/LC_MESSAGES/django.po}
     notify: Restart uwsgi
   - name: Execute django manage.py migrate
     become: yes
     become_user: django
     django_manage: command=migrate virtualenv=/srv/django app_path=/srv/django/hp
   - name: Execute django manage.py compilemessages -l de
     become: yes
     become_user: django
     django_manage: command='compilemessages -l de' virtualenv=/srv/django app_path=/srv/django/hp
     notify: Restart uwsgi
   - name: Unpack favicomatic.zip
     become: yes
     become_user: django
     unarchive: src=files/django/favicomatic.zip dest=/srv/django/hp/core/static/favicon/
   - name: Create directory /srv/django/hp/static
     file: path=/srv/django/hp/static state=directory group=root owner=root mode=0755
   - name: Install django static files into /srv/www/jabber.rwth-aachen.de
     become: yes
     become_user: django
     command: /srv/django/bin/python3 /srv/django/hp/manage.py collectstatic --noinput
     register: command_result
     changed_when: "'Copying ' in command_result.stdout"
   - name: Have django's .profile automatically activate the virtualenv /srv/django
     lineinfile: line='if [ -f /srv/django/bin/activate ]; then . /srv/django/bin/activate; cd /srv/django; fi'
                 dest=/var/lib/django/.profile state=present
   - name: Create /srv/www/jabber.rwth-aachen.de/.well-known
     file: path=/srv/www/jabber.rwth-aachen.de/.well-known state=directory group=django owner=django mode=0755
   - name: Copy .well-known/host-meta
     copy: src=files/apache2/host-meta dest=/srv/www/jabber.rwth-aachen.de/.well-known/host-meta owner=root group=root mode=0644
   - name: Copy SSL Chain
     copy: src=files/ssl/rwth-chain.pem dest=/etc/ssl/certs/rwth-chain.pem owner=root group=root mode=0644
     notify: Restart apache2
   - name: Copy SSL Cert
     copy: src=files/ssl/jabber.public.pem dest=/etc/ssl/certs/jabber.rwth-aachen.de.pem owner=root group=root mode=0644
     notify: Restart apache2
   - name: Copy SSL Key
     copy: src=files/ssl/jabber.private.pem dest=/etc/ssl/private/jabber.rwth-aachen.de.pem owner=root group=ssl-cert mode=0640
     notify: Restart apache2
   - name: Configure uwsgi
     copy: src=files/uwsgi/jabber.rwth-aachen.de.ini dest=/etc/uwsgi/apps-available/jabber.rwth-aachen.de.ini
     notify: Restart uwsgi
   - name: Enable jabber.rwth-aachen.de in uwsgi
     file: src=/etc/uwsgi/apps-available/jabber.rwth-aachen.de.ini dest=/etc/uwsgi/apps-enabled/jabber.rwth-aachen.de.ini state=link
     notify: Restart uwsgi
   - name: Enable Apache module 'cgi'
     command: /usr/sbin/a2enmod cgi
     register: command_result
     changed_when: "'Enabling module cgi.' in command_result.stdout"
     notify: Restart apache2
   - name: Enable Apache module 'headers'
     command: /usr/sbin/a2enmod headers
     register: command_result
     changed_when: "'Enabling module headers.' in command_result.stdout"
     notify: Restart apache2
   - name: Enable Apache module 'macro'
     command: /usr/sbin/a2enmod macro
     register: command_result
     changed_when: "'Enabling module macro.' in command_result.stdout"
     notify: Restart apache2
   - name: Enable Apache module 'proxy'
     command: /usr/sbin/a2enmod proxy
     register: command_result
     changed_when: "'Enabling module proxy.' in command_result.stdout"
     notify: Restart apache2
   - name: Enable Apache module 'rewrite'
     command: /usr/sbin/a2enmod rewrite
     register: command_result
     changed_when: "'Enabling module rewrite.' in command_result.stdout"
     notify: Restart apache2
   - name: Enable Apache module 'ssl'
     command: /usr/sbin/a2enmod ssl
     register: command_result
     changed_when: "'Enabling module ssl.' in command_result.stdout"
     notify: Restart apache2
   - name: Disable Apache default config
     command: /usr/sbin/a2dissite 000-default
     register: command_result
     changed_when: "'Site 000-default disabled.' in command_result.stdout"
     notify: Restart apache2
   - name: Disable Apache default ssl config
     command: /usr/sbin/a2dissite default-ssl
     register: command_result
     changed_when: "'Site default-ssl disabled.' in command_result.stdout"
     notify: Restart apache2
   - name: Configure Apache extra-security
     copy: src=files/apache2/extra-security.conf dest=/etc/apache2/conf-available/extra-security.conf
     notify: Restart apache2
   - name: Enable Apache macros
     command: /usr/sbin/a2enconf extra-security
     register: command_result
     changed_when: "'Enabling conf extra-security.' in command_result.stdout"
     notify: Restart apache2
   - name: Configure Apache macros
     copy: src=files/apache2/macros.conf dest=/etc/apache2/conf-available/macros.conf
     notify: Restart apache2
   - name: Enable Apache macros
     command: /usr/sbin/a2enconf macros
     register: command_result
     changed_when: "'Enabling conf macros.' in command_result.stdout"
     notify: Restart apache2
   - name: Configure Apache for jabber.rwth-aachen.de
     copy: src=files/apache2/jabber.conf dest=/etc/apache2/sites-available/jabber.conf
     notify: Restart apache2
   - name: Enable Apache site 'jabber'
     command: /usr/sbin/a2ensite jabber
     register: command_result
     changed_when: "'Enabling site jabber.' in command_result.stdout"
     notify: Restart apache2
   - name: Configure Apache for upload.jabber.rwth-aachen.de
     copy: src=files/apache2/upload.conf dest=/etc/apache2/sites-available/upload.conf
     notify: Restart apache2
   - name: Enable Apache site 'upload'
     command: /usr/sbin/a2ensite upload
     register: command_result
     changed_when: "'Enabling site upload.' in command_result.stdout"
     notify: Restart apache2
   - name: Set up celery
     copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root mode=0644
     with_items:
      - {src: files/celery/hp-celery.conf,     dest: /etc/default/celery}
      - {src: files/celery/hp-celery.service,  dest: /etc/systemd/system/celery.service}
      - {src: files/celery/hp-celery.tmpfiles, dest: /etc/tmpfiles.d/celery.conf}
     notify:
      - Enable celery
      - Reload systemd
      - Restart celery
   - name: Create celery logfile
     copy: dest=/var/log/celery.log content='' force=no owner=django group=django mode=644
   - name: Create celery run dir
     file: path=/run/celery state=directory owner=django group=django mode=755
   - name: Change port of redis-server
     lineinfile: dest=/etc/redis/redis.conf regexp='^port' line='port 6379' state=present
   - name: Change port of redis-server sentinel
     lineinfile: dest=/etc/redis/sentinel.conf regexp='^sentinel monitor mymaster' line='sentinel monitor mymaster 127.0.0.1 6379 2'
                 state=present
   - name: Deploy gpg keys
     copy: src=files/django/{{ item }} dest=/srv/django/gnupg/{{ item }} owner=django group=django mode=0440
     with_items:
      - PutYourKeyHere.key
      - PutYourKeyHere.pub
   #
   # Set up munin
   #
   - name: Install munin
     apt: name={{ item }} state=latest default_release=jessie-backports
     with_items:
      - munin
      - munin-node
      - munin-plugins-c
      - munin-plugins-core
   - name: Copy munin config
     copy: src=files/munin/munin.conf dest=/etc/munin/munin.conf
   - name: Copy munin-node config
     copy: src=files/munin/munin-node dest=/etc/munin/plugin-conf.d/munin-node
     notify: Restart munin-node
   - name: Copy some custom munin plugins from https://github.com/fsinf/munin
     copy: src=files/munin/plugins/{{ item }} dest=/etc/munin/plugins/{{ item }} mode=0755
     with_items:
      - df
      - df_abs
      - ejabberd
      - ejabberd_active_users_7
      - ejabberd_active_users_7
      - ejabberd_c2s_types
      - ejabberd_registered
      - ejabberd_uptime
      - muc_count
      - rocheck
     notify: Restart munin-node
   - name: Disable some plugins that are not needed or not working
     file: path={{ item }} state=absent
     with_items:
      - /etc/munin/plugins/nfs4_client
      - /etc/munin/plugins/nfsd4
      - /etc/munin/plugins/nfs_client
      - /etc/munin/plugins/nfsd
     notify: Restart munin-node
   - name: Disable munin's default apache config
     file: path=/etc/apache2/conf-enabled/munin.conf state=absent
     notify: Restart apache2
   #
   # Finish
   #
   - name: Run notified handlers right now
     meta: flush_handlers
   - name: Make sure services are running
     service: name={{ item }} state=started
     with_items:
      - apache2
      - celery
      - cron
      - ejabberd
      - munin-node
      - mysql
      - postfix
      - redis-server
      - uwsgi
...
